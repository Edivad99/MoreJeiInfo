plugins {
    id 'java'
    id 'idea'
    id 'fabric-loom'
}
base.archivesName = "${mod_name}-fabric-${minecraft_version}"

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabricLoaderVersion}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricApiVersion}"
    implementation project(':common')
}

loom {
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('run/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('run/server')
        }
        datagenClient {
            inherit client
            setConfigName('Fabric Data')
            vmArg '-Dfabric-api.datagen'
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"
            runDir('run/data')
        }
    }
}
sourceSets.main.resources.srcDirs += ['src/main/generated']

tasks.withType(JavaCompile).configureEach {
    source(project(':common').sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(':common').sourceSets.main.allJava)
}
tasks.named('sourcesJar', Jar) {
    from(project(':common').sourceSets.main.allSource)
}

processResources {
    from project(':common').sourceSets.main.resources
}
