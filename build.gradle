import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask
import static org.apache.commons.lang3.StringUtils.repeat

plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT' apply(false)
    id 'net.neoforged.gradle' version '[6.0.18,6.2)' apply(false)
    id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT' apply(false)
    id("org.spongepowered.mixin") version "0.7-SNAPSHOT" apply(false)
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.79.0'
    id 'me.modmuss50.mod-publish-plugin' version '0.3.3'
}

println(repeat('*', 60))
println("Project Version: $version")
println("Java: ${System.getProperty('java.version')}")
println("JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')})")
println("Arch: ${System.getProperty('os.arch')}")
println(repeat('*', 60))

subprojects {
    apply plugin: 'java'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()
    java.withJavadocJar()

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            attributes([
                    'Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : project.jar.archiveVersion,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
    }

    repositories {
        mavenCentral()
        maven {
            name = 'Sponge'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'JEI'
            url = 'https://maven.blamejared.com'
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.getRelease().set(17)
    }

    processResources {
        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'mods.toml']) {
            expand project.properties
        }
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }
}

/*tasks.register('makeChangelog', GitChangelogTask) {
    fromRepo = projectDir.absolutePath.toString()
    toRef = 'HEAD'
    file = file('CHANGELOG.md')
    untaggedName = 'Next release'
    templateContent = file('changelog.mustache').text
}

publishMods {
    displayName = "morejeiinfo-$minecraft_version-$mod_version"
    version = mod_version
    type = STABLE

    def changelogFile = file('CHANGELOG.md')
    changelog = changelogFile.exists() ? changelogFile.text : 'CHANGELOG.md not found'

    modLoaders.add('neoforge')
    if (minecraft_version.equals('1.20.1')) {
        modLoaders.add('forge')
    }
    file = jar.archiveFile

    curseforge {
        projectId = '902996'
        accessToken = providers.environmentVariable('CURSEFORGE_TOKEN')
        minecraftVersions.add(minecraft_version)
    }
    modrinth {
        projectId = 'bpVBqwnF'
        accessToken = providers.environmentVariable('MODRINTH_TOKEN')
        minecraftVersions.add(minecraft_version)
    }
}
*/