//import static org.apache.commons.lang3.StringUtils.repeat

plugins {
    id 'java-library'
    id 'java'
    id 'fabric-loom' version '1.2-SNAPSHOT' apply(false)
    id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT' apply(false)
    id 'org.spongepowered.mixin' version "0.7-SNAPSHOT" apply(false)
}

//println(repeat('*', 60))
println("Project Version: $mod_version")
println("Java: ${System.getProperty('java.version')}")
println("JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')})")
println("Arch: ${System.getProperty('os.arch')}")
//println(repeat('*', 60))

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.JETBRAINS
    }
}

subprojects {
    apply plugin: 'java'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
            vendor = JvmVendorSpec.JETBRAINS
        }
    }
    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            attributes([
                    'Specification-Title'     : mod_name,
                    'Specification-Vendor'    : 'Edivad99',
                    'Specification-Version'   : '1',
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : mod_version,
                    'Implementation-Vendor'   : 'Edivad99',
                    'Implementation-Commit'   : 'git rev-parse HEAD'.execute().text.trim(),
            ])
        }
    }

    repositories {
        mavenCentral()
        maven {
            name = 'Sponge'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'JEI'
            url = 'https://maven.blamejared.com'
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.getRelease().set(17)
    }

    processResources {
        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'mods.toml']) {
            expand project.properties
        }
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }
}
