plugins {
    id 'java-library'
    id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.41'
    id 'me.modmuss50.mod-publish-plugin' version '0.4.2'
}
base.archivesName = "$mod_id-neoforge-$minecraft_version-$mod_version"

runs {
    configureEach {
        systemProperty 'forge.logging.console.level', 'debug'
        systemProperty 'forge.enabledGameTestNamespaces', 'railcraft'

        modSource project.sourceSets.main

        jvmArguments.add("-XX:+AllowEnhancedClassRedefinition")
    }
    client {
    }
    server {
        programArgument '--nogui'
    }

    data {
        programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    implementation "net.neoforged:neoforge:$neo_version"
    compileOnly project(':common')
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            mod_version:                mod_version,
            mod_name:                   mod_name,
            neo_loader_version_range:   neo_loader_version_range,
            neo_version_range:          neo_version_range,
            minecraft_version_range:    minecraft_version_range,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

TaskCollection.metaClass.excludingNeoTasks = { ->
    delegate.matching { !it.name.startsWith("neo") }
}

tasks.withType(JavaCompile).excludingNeoTasks().configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).excludingNeoTasks().configureEach {
    source(project(":common").sourceSets.main.allJava)
}

tasks.withType(ProcessResources).excludingNeoTasks().configureEach {
    from project(":common").sourceSets.main.resources
}

publishMods {
    displayName = "$mod_id-neoforge-$minecraft_version-$mod_version"
    version = mod_version
    type = STABLE

    def changelogFile = project(':common').file('CHANGELOG.md')
    changelog = changelogFile.exists() ? changelogFile.text : 'CHANGELOG.md not found'

    modLoaders.add('neoforge')
    file = jar.archiveFile

    curseforge {
        projectId = curseforge_projectId
        accessToken = providers.environmentVariable('CURSEFORGE_TOKEN')
        minecraftVersions.add(minecraft_version)
    }
    modrinth {
        projectId = modrinth_projectId
        accessToken = providers.environmentVariable('MODRINTH_TOKEN')
        minecraftVersions.add(minecraft_version)
    }
}
